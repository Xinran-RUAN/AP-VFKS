% IMEX scheme for 2D kinetic model
% Periodic boundary: index 1 = index (N + 1), i.e. x(0) = x(N)
%   where N = length(x)
% rho(i,j) = rho(x_i, x_j), where i,j = 1, ..., N, 
%                           i.e. x_i, x_j = x(0), ..., x(N-1)
% G1(i,j,k,l) = G1(x_{i+1/2}, x_j, v_k, v_l), where i,j = 1, ..., N
%   i.e. x_i = x(1/2), ..., x(N-1/2)
% G2(i,j,k,l) = G1(x_i, x_{j+1/2}, v_k, v_l), where i,j = 1, ..., N

% In the code, the index j is short for x(j)

function[rho_n, c_n, G1_n, G2_n] = OneStep_Kinetic2D(rho_current, c_current, G1_current, G2_current, domain, time_step, myfunc, mypara)
[Nx1, Nx2, ~, ~] = size(G1_current);
eps = mypara.eps;
dt = time_step;
dv1 = domain.v_meshsize(1);
dv2 = domain.v_meshsize(2);
dx1 = domain.x_meshsize(1);
dx2 = domain.x_meshsize(2);
v1 = domain.v1_vector;
v2 = domain.v2_vector;
% compute phi and psi
Psi = myfunc.psi(v1, v2); % Psi(i, j) = psi(v_i, v_j) % v1,v2 are row vectors
Phi_1 = myfunc.phi_1(v1, v2);
Phi_2 = myfunc.phi_2(v1, v2);

beta = sum(sum(Phi_1 .* v1')) * dv1 * dv2; % or sum(sum(Phi_2 .* v2))*dv1*dv2
Dh = sum(sum(Psi .* v1' .* v1')) * dv1 * dv2;

q_func = myfunc.q_func;
dq_func = myfunc.dq_func;
%% update tilde{G} - explicit
rho = rho_current;
c = c_current;
% rho_1_he = 0.5 * (rho + rho([2:end,1], :)); % i: 1/2, ..., N-1/2
% rho_2_he = 0.5 * (rho + rho(:, [2:end,1])); % j: 1/2, ..., N-1/2
rho_1_h = 0.5 * (rho + circshift(rho, [-1, 0])); % 上移一行
rho_2_h = 0.5 * (rho + circshift(rho, [0, -1])); % 左移一列
q_1_h = q_func(rho_1_h); % 1/2, ..., N-1/2
q_2_h = q_func(rho_2_h); % 1/2, ..., N-1/2
dq_1_h = myfunc.dq_func(rho_1_h); % 1/2, ..., N-1/2
dq_2_h = myfunc.dq_func(rho_2_h); % 1/2, ..., N-1/2

rho_12_h = 0.25 * (rho + circshift(rho, [-1, 0])...
                + circshift(rho, [0,-1]) + circshift(rho, [-1,-1]));
c_12_h = 0.25 * (c + circshift(c, [-1,0])...
                + circshift(c,[0,-1]) + circshift(c, [-1,-1]));

rho_dq = rho .* dq_func(rho);
rho_dq_12_h = rho_12_h .* dq_func(rho_12_h);


V1 = permute(v1, [1,3,2,4]); % [1,1,Nv1]:列2--Nv1，移到第三维
V2 = permute(v2, [1,3,4,2]); % [1,1,1,Nv2]:列2--Nv2，移到第四维
PSI = permute(Psi, [3,4,1,2]); % [1,1,Nv1,Nv2]
K1_mat = max(V1, 0) .* (...
      G1_current .* q_1_h ...
    - circshift(G1_current,[1,0,0,0]) .* circshift(q_1_h,[1,0])...
    ) / dx1 ...
    + min(V1, 0) .* (...
      circshift(G1_current,[-1,0,0,0]) .* circshift(q_1_h,[-1,0])...
    - G1_current .* q_1_h...
    ) / dx1 ...
    + max(V2, 0) .* (...
      G1_current .* q_1_h ...
    - circshift(G1_current, [0,1,0,0]) .* circshift(q_1_h, [0,1])...
    ) / dx2 ...
    + min(V2, 0) .* (...
      circshift(G1_current,[0,-1,0,0]) .* circshift(q_1_h, [0,-1])...
    - G1_current .* q_1_h...
    ) / dx2 ...
    + PSI .* ( ...
        circshift(rho_dq,[-1,0]) .* ( ...
                    V1.^2 .* (circshift(rho_1_h, [-1,0]) - rho_1_h) / dx1 ...
                  + V1 .* V2 .* (circshift(rho_2_h,[-1,0]) - circshift(rho_2_h, [-1, 1])) / dx2 ...
                )...
      - rho_dq .* (...
                    V1.^2 .* (rho_1_h - circshift(rho_1_h, [1,0])) / dx1 ...
                  + V1 .* V2 .* (rho_2_h - circshift(rho_2_h, [0,1])) / dx2...
                  )...
            ) / dx1...      
    + PSI .* (...
        rho_dq_12_h .* (...
                    V1 .* V2 .* (circshift(rho_2_h, [-1,0]) - rho_2_h) / dx1...
                  + V2.^2 .* (circshift(rho_1_h, [0,-1]) - rho_1_h) / dx2 ...
                  ) ...
      - circshift(rho_dq_12_h, [0,1]) .* (...
                    V1 .* V2 .* (circshift(rho_2_h,[-1,1]) - circshift(rho_2_h,[0,1])) / dx1 ...
                  + V2.^2 .* (rho_1_h - circshift(rho_1_h, [0,1])) / dx2 ...
                  ) ...
            ) / dx2;
K2_mat = max(V1, 0) .* (...
      G2_current .* q_2_h ...
    - circshift(G2_current,[1,0,0,0]) .* circshift(q_2_h,[1,0])...
    ) / dx1 ...
    + min(V1, 0) .* (...
      circshift(G2_current,[-1,0,0,0]) .* circshift(q_2_h,[-1,0])...
    - G2_current .* q_2_h...
    ) / dx1 ...
    + max(V2, 0) .* (...
      G2_current .* q_2_h ...
    - circshift(G2_current, [0,1,0,0]) .* circshift(q_2_h, [0,1])...
    ) / dx2 ...
    + min(V2, 0) .* (...
      circshift(G2_current,[0,-1,0,0]) .* circshift(q_2_h, [0,-1])...
    - G2_current .* q_2_h...
    ) / dx2 ...
    + PSI .* ( ...
        rho_dq_12_h .* ( ...
                    V1.^2 .* (circshift(rho_2_h, [-1,0]) - rho_2_h) / dx1 ...
                  + V1 .* V2 .* (circshift(rho_1_h, [0,-1]) - rho_1_h) / dx2 ...
                )...
      - circshift(rho_dq_12_h, [1,0]) .* (...
                    V1.^2 .* (rho_2_h - circshift(rho_2_h, [1,0])) / dx1 ...
                  + V1 .* V2 .* (circshift(rho_1_h, [1,-1]) - circshift(rho_1_h, [1,0])) / dx2...
                  )...
            ) / dx1...      
    + PSI .* (...
        circshift(rho_dq, [0,-1]) .* (...
                    V1 .* V2 .* (circshift(rho_1_h, [0,-1]) - circshift(rho_1_h, [1,-1])) / dx1...
                  + V2.^2 .* (circshift(rho_2_h, [0,-1]) - rho_2_h) / dx2 ...
                  ) ...
      - rho_dq .* (...
                    V1 .* V2 .* (rho_1_h - circshift(rho_1_h,[1,0])) / dx1 ...
                  + V2.^2 .* (rho_2_h - circshift(rho_2_h, [0,1])) / dx2 ...
                  ) ...
            ) / dx2;

PHI_1 = permute(Phi_1, [3,4,1,2]); % [1,1,Nv1,Nv2]
PHI_2 = permute(Phi_2, [3,4,1,2]); % [1,1,Nv1,Nv2]
tS1_mat = -PSI .* q_1_h .* (...
            V1 .* (circshift(rho, [-1,0]) - rho) / dx1 ...
          + V2 .* (rho_12_h - circshift(rho_12_h, [0,1])) / dx2 ...
            ) ...
         + PHI_1 .* (...
            max((circshift(c,[-1,0]) - c) / dx1, 0) .* rho .* q_func(circshift(rho, [-1,0]))  ...
          + min((circshift(c,[-1,0]) - c) / dx1, 0) .* circshift(rho, [-1,0]) .* q_func(rho) ... 
            ) ...
         + PHI_2 .* (...
            max((c_12_h - circshift(c_12_h,[0,1])) / dx2, 0) .* circshift(rho_12_h,[0,1]) .* q_func(rho_12_h)  ...
          + min((c_12_h - circshift(c_12_h,[0,1])) / dx2, 0) .* rho_12_h .* q_func(circshift(rho_12_h,[0,1])) ...
             );
tS2_mat = -PSI .* q_2_h .* (...
            V1 .* (rho_12_h - circshift(rho_12_h, [1,0])) / dx1 ...
          + V2 .* (circshift(rho, [0,-1]) - rho) / dx2 ...
            ) ...
         + PHI_1 .* (...
            max((c_12_h - circshift(c_12_h,[1,0])) / dx1, 0) .* circshift(rho_12_h, [1,0]) .* q_func(rho_12_h)  ...
          + min((c_12_h - circshift(c_12_h,[1,0])) / dx1, 0) .* rho_12_h .* q_func(circshift(rho_12_h, [1,0])) ... 
            ) ...
         + PHI_2 .* (...
            max((circshift(c,[0,-1]) - c) / dx2, 0) .* rho .* q_func(circshift(rho, [0,-1]))  ...
          + min((circshift(c,[0,-1]) - c) / dx2, 0) .* circshift(rho, [0,-1]) .* q_func(rho) ...
             );

% compute Pi_K
Pi_K1_mat = dv1 * dv2 * sum(sum(PSI .* K1_mat, 3),4);
Pi_K2_mat = dv1 * dv2 * sum(sum(PSI .* K2_mat, 3),4);

% compute tilde{G}
tG1_mat = (...
            G1_current ...
          - dt / eps * (K1_mat - Pi_K1_mat) ...
          + dt / eps^2 * tS1_mat ...
          + dt * myfunc.f2_func(G1_current, rho_1_h) ...
          ) ./ (1 + dt / eps^2 * q_1_h); % q无需permute，可由matlab自动广播
tG2_mat = (...
            G2_current ...
          - dt / eps * (K2_mat - Pi_K2_mat) ...
          + dt / eps^2 * tS2_mat ...
          + dt * myfunc.f2_func(G2_current, rho_2_h) ...
          ) ./ (1 + dt / eps^2 * q_2_h);

%% update rho - implicit
Nx_total = Nx1 * Nx2;

D_r = Dh * dt * q_1_h ./ (eps^2 + dt * q_1_h) .* q_1_h ... 
    - Dh * rho_1_h .* dq_1_h; 

D_u = Dh * dt * q_2_h ./ (eps^2 + dt * q_2_h) .* q_2_h ...
    - Dh * rho_2_h .* dq_2_h; 

D_l = Dh * dt * q_1_h([end, 1:end-1],:) ./ (eps^2 + dt * q_1_h([end, 1:end-1], :)) .* q_1_h([end, 1:end-1], :)...
    - Dh * rho_1_h([end, 1:end-1],:) .* dq_1_h([end, 1:end-1],:); 

D_d = Dh * dt * q_2_h(:,[end, 1:end-1]) ./ (eps^2 + dt * q_2_h(:, [end, 1:end-1])) .* q_2_h(:, [end, 1:end-1]) ...
    - Dh * rho_2_h(:,[end, 1:end-1]) .* dq_2_h(:,[end, 1:end-1]);  

eps_dx_c1_r = dt * q_1_h ./ (eps^2 + dt * q_1_h) .* (c([2:end,1],:) - c) / dx1; % i: 1/2, 3/2, ..., N-1/2

eps_dx_c2_u = dt * q_2_h ./ (eps^2 + dt * q_2_h) .* (c(:,[2:end,1]) - c) / dx2; % j: 1/2, 3/2, ..., N-1/2

eps_dx_c1_l = dt * q_1_h([end, 1:end-1],:) ./ (eps^2 + dt * q_1_h([end, 1:end-1],:)) .* (c - c([end,1:end-1], :)) / dx1; % i: -1/2, 1/2, ..., N-3/2

eps_dx_c2_d = dt * q_2_h(:,[end, 1:end-1]) ./ (eps^2 + dt * q_2_h(:,[end, 1:end-1])) .* (c - c(:, [end,1:end-1])) / dx2; % j: -1/2, 1/2, ..., N-3/2

K_r =  beta * dt / dx1 * min(eps_dx_c1_r, 0) .* q_func(rho);

K_u =  beta * dt / dx2 * min(eps_dx_c2_u, 0) .* q_func(rho);

K_l = -beta * dt / dx1 * max(eps_dx_c1_l, 0) .* q_func(rho);

K_d = -beta * dt / dx2 * max(eps_dx_c2_d, 0) .* q_func(rho);

K_0 = beta * dt / dx1 * max(eps_dx_c1_r, 0) .* q_func(rho([2:end,1], :)) ...
    + beta * dt / dx2 * max(eps_dx_c2_u, 0) .* q_func(rho(:, [2:end,1]))...
    - beta * dt / dx1 * min(eps_dx_c1_l, 0) .* q_func(rho([end,1:end-1], :)) ...
    - beta * dt / dx2 * min(eps_dx_c2_d, 0) .* q_func(rho(:,[end,1:end-1]));

% construct matrix of coefficients
A_l = -dt / dx1^2 * D_l + K_l; 
A_r = -dt / dx1^2 * D_r + K_r; 
A_d = -dt / dx2^2 * D_d + K_d;
A_u = -dt / dx2^2 * D_u + K_u; 
A_0 = 1 + dt / dx1^2 * (D_l + D_r) ...
        + dt / dx2^2 * (D_d + D_u) ...
        + K_0;
    
% construct MAT_D   
a_l = my_reshape(A_l, [Nx1, Nx2]);
a_ls = [a_l(2:end); 0]; % shifted for sparse
a_r = my_reshape(A_r, [Nx1, Nx2]);
a_rs = [0; a_r(1:end-1)];
a_d = my_reshape(A_d, [Nx1, Nx2]);
a_ds = [a_d(Nx1+1:end); zeros(Nx1,1)];
a_u = my_reshape(A_u, [Nx1, Nx2]);
a_us = [zeros(Nx1,1); a_u(1:end-Nx1)];
a_0 = my_reshape(A_0, [Nx1, Nx2]);
 
MAT_D = spdiags([a_ds, a_ls, a_0, a_rs, a_us], [-Nx1, -1, 0, 1, Nx1], Nx_total, Nx_total);
idx = sub2ind([Nx_total, Nx_total], (1:Nx1-1) * Nx1+1, (1:Nx1-1) * Nx1);
MAT_D(idx) = 0;
idx = sub2ind([Nx_total, Nx_total], (1:Nx1-1) * Nx1, (1:Nx1-1) * Nx1+1);
MAT_D(idx) = 0;

% periodic BC
idx = sub2ind([Nx_total, Nx_total], 1 + (0:Nx1-1) * Nx1, (1:Nx1) * Nx1);
MAT_D(idx) = a_l(1 + (0:Nx1-1) * Nx1);
idx = sub2ind([Nx_total, Nx_total], (1:Nx1) * Nx1, 1 + (0:Nx1-1) * Nx1);
MAT_D(idx) = a_r((1:Nx1) * Nx1);
idx = sub2ind([Nx_total, Nx_total], 1:Nx1, Nx_total - Nx1 + (1:Nx1));
MAT_D(idx) = a_d(1:Nx1);
idx = sub2ind([Nx_total, Nx_total], Nx_total - Nx1 + (1:Nx1), 1:Nx1);
MAT_D(idx) = a_u(Nx_total-Nx1+(1:Nx1));

% compute residuals "integral(v*diff(q*g), dv)" - index 1, 2, ..., N-1
int_v_dqg = sum(...
            sum(...
               V1 .* (q_1_h .* tG1_mat - circshift(q_1_h, [1,0]) .* circshift(tG1_mat, [1,0,0,0])) / dx1 ...
             + V2 .* (q_2_h .* tG2_mat - circshift(q_2_h, [0,1]) .* circshift(tG2_mat, [0,1,0,0])) / dx2, ...
             3),...
             4) * dv1 * dv2;
int_v_dqg_vec = reshape(int_v_dqg, [Nx_total, 1]);

% compute residuals "diff(a*diff(rho))"
d_adrho = Dh * (... 
                (dt * q_1_h) ./ (eps^2 + dt * q_1_h) .* q_1_h .* (rho([2:end,1],:) - rho) / dx1 ... 
              - (dt * q_1_h([end, 1:end-1],:)) ./ (eps^2 + dt * q_1_h([end, 1:end-1],:)) .* q_1_h([end, 1:end-1],:) .* (rho - rho([end, 1:end-1],:)) / dx1 ...
               ) / dx1 ...
        + Dh * (...
                (dt * q_2_h) ./ (eps^2 + dt * q_2_h) .* q_2_h .* (rho(:,[2:end,1]) - rho) / dx2 ...
              - (dt * q_2_h(:,[end, 1:end-1])) ./ (eps^2 + dt * q_2_h(:,[end, 1:end-1])) .* q_2_h(:,[end, 1:end-1]) .* (rho - rho(:,[end, 1:end-1])) / dx2 ...
               ) / dx2;
d_adrho_vec = reshape(d_adrho, [Nx_total, 1]);
% compute chemotaxis term
dcdx_1 = (c([2:end,1],:) - c) / dx1;
dcdx_2 = (c(:,[2:end,1]) - c) / dx2;

dcdx_Phi_1 = max(dcdx_1, 0) .* rho .* q_func(rho([2:end,1], :)) ...
           + min(dcdx_1, 0) .* rho([2:end,1], :) .* q_func(rho);

dcdx_Phi_2 = max(dcdx_2, 0) .* rho .* q_func(rho(:, [2:end,1])) ...
           + min(dcdx_2, 0) .* rho(:, [2:end,1]) .* q_func(rho);

d_bPhi = (...
            beta * (dt * q_1_h) ./ (eps^2 + dt * q_1_h) .* dcdx_Phi_1 ... 
          - beta * (dt * q_1_h([end,1:end-1],:)) ./ (eps^2 + dt * q_1_h([end,1:end-1],:)) .* dcdx_Phi_1([end,1:end-1],:) ...
         ) / dx1...
       + ( ...
            beta * (dt * q_2_h) ./ (eps^2 + dt * q_2_h) .* dcdx_Phi_2 ...
          - beta * (dt * q_2_h(:,[end,1:end-1])) ./ (eps^2 + dt * q_2_h(:,[end,1:end-1])) .* dcdx_Phi_2(:,[end,1:end-1]) ...
         ) / dx2;
d_bPhi_vec = reshape(d_bPhi, [Nx_total, 1]);
% Source term
S_vec = reshape(myfunc.f1_func(rho), [Nx_total, 1]);
% solve rho
rho_vec = reshape(rho, [Nx_total, 1]);
rho_vec_n = MAT_D \ (rho_vec + dt * (S_vec - int_v_dqg_vec - d_adrho_vec + d_bPhi_vec));
% rho_vec_n = MAT_D \ rho_vec;
rho_n = reshape(rho_vec_n, [Nx1, Nx2]);

%% update G
rho_12n_h = 0.25 * (rho_n + rho_n([2:end,1],:) + rho_n(:,[2:end,1]) + rho_n([2:end,1],[2:end,1])); % i,j: 1/2, ..., N-1/2
tS1_n_mat = -PSI .* q_1_h .* (...
                      V1 .* (circshift(rho_n, [-1,0]) - rho_n) / dx1...
                    + V2 .* (rho_12n_h - circshift(rho_12n_h, [0,1])) / dx2 ...
                   ) ...
        + PHI_1 .* ( ...
                      max((circshift(c, [-1,0]) - c) / dx1, 0) .* rho_n .* q_func(circshift(rho, [-1,0])) ...
                    + min((circshift(c, [-1,0]) - c) / dx1, 0) .* circshift(rho_n,[-1,0]) .* q_func(rho) ...
                   ) ...
        + PHI_2 .* ( ...
                      max((c_12_h - circshift(c_12_h, [0,1])) / dx2, 0) .* circshift(rho_12n_h,[0,1]) .* q_func(rho_12_h) ...
                    + min((c_12_h - circshift(c_12_h, [0,1])) / dx2, 0) .* rho_12n_h .* q_func(circshift(rho_12_h, [0,1])) ...
                   );
G1_n = tG1_mat + dt * (tS1_n_mat - tS1_mat) ./ (eps^2 + dt * q_1_h);
tS2_n_mat = -PSI .* q_2_h .* (...
                      V1 .* (rho_12n_h - circshift(rho_12n_h, [1,0])) / dx1...
                    + V2 .* (circshift(rho_n, [0,-1]) - rho_n) / dx2 ...
                   ) ...
        + PHI_1 .* ( ...
                      max((c_12_h - circshift(c_12_h, [1,0])) / dx1, 0) .* circshift(rho_12n_h, [1,0]) .* q_func(rho_12_h) ...
                    + min((c_12_h - circshift(c_12_h, [1,0])) / dx1, 0) .* rho_12n_h .* q_func(circshift(rho_12_h, [1,0])) ...
                   ) ...
        + PHI_2 .* ( ...
                      max((circshift(c, [0,-1]) - c) / dx2, 0) .* rho_n .* q_func(circshift(rho, [0,-1])) ...
                    + min((circshift(c, [0,-1]) - c) / dx2, 0) .* circshift(rho_n, [0,-1]) .* q_func(rho) ...
                   );
G2_n = tG2_mat + dt * (tS2_n_mat - tS2_mat) ./ (eps^2 + dt * q_2_h);

%% update c
zeta = mypara.zeta;
% construct matrix
C_l = -dt / dx1^2 * ones(size(c));
C_r = -dt / dx1^2 * ones(size(c));
C_d = -dt / dx2^2 * ones(size(c));
C_u = -dt / dx2^2 * ones(size(c));
C_0 = zeta + dt - (C_l + C_r + C_u + C_d);

c_l = my_reshape(C_l, [Nx1, Nx2]);
c_ls = [c_l(2:end); 0];
c_r = my_reshape(C_r, [Nx1, Nx2]);
c_rs = [0; c_r(1:end-1)];
c_d = my_reshape(C_d, [Nx1, Nx2]);
c_ds = [c_d(Nx1+1:end); zeros(Nx1,1)];
c_u = my_reshape(C_u, [Nx1, Nx2]);
c_us = [zeros(Nx1,1); c_u(1:end-Nx1)];
c_0 = my_reshape(C_0, [Nx1, Nx2]);

MAT_C = spdiags([c_ds, c_ls, c_0, c_rs, c_us], [-Nx1, -1, 0, 1, Nx1], Nx_total, Nx_total);
idx = sub2ind([Nx_total, Nx_total], 1 + (1:Nx1-1) * Nx1, (1:Nx1-1) * Nx1);
MAT_C(idx) = 0;
idx = sub2ind([Nx_total, Nx_total], (1:Nx1-1) * Nx1, (1:Nx1-1) * Nx1+1);
MAT_C(idx) = 0;

% Periodic B.C.
idx = sub2ind([Nx_total, Nx_total], 1 + (0:Nx1-1) * Nx1, (1:Nx1) * Nx1);
MAT_C(idx) = c_l(1+(0:Nx1-1)*Nx1);
idx = sub2ind([Nx_total, Nx_total], (1:Nx1) * Nx1, 1+(0:Nx1-1) * Nx1);
MAT_C(idx) = c_r((1:Nx1)*Nx1);
idx = sub2ind([Nx_total, Nx_total], (1:Nx1), Nx_total-Nx1+(1:Nx1));
MAT_C(idx) = c_d(1:Nx1);
idx = sub2ind([Nx_total, Nx_total],  Nx_total-Nx1+(1:Nx1), (1:Nx1));
MAT_C(idx) = c_d(Nx_total-Nx1+(1:Nx1));
% solve c
c_vec = reshape(c, [Nx_total, 1]);
c_vec_n = MAT_C \ (zeta * c_vec + dt * rho_vec_n);
c_n = reshape(c_vec_n, [Nx1, Nx2]);

